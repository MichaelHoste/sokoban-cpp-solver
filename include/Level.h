/*----------------------------------------------*/
/*================== ISokoban ==================*/
/*----------------------------------------------*/
/* Version : 1.0								*/
/* Author : MichaÃ«l Hoste						*/
/* Copyright : See LICENSE file for details   	*/
/*----------------------------------------------*/
/**
 * @brief Class containing a level and every functions about it
 *
 * Positions in grid start in the upper-left corner with (m=0,n=0).
 *
 * Example : (2,4) means third rows and fifth cols starting in the upper-left
 * corner.
 *
 * Grid is made like this in loaded files :
 *
 *     #####                 # -> wall
 *     #   #                 $ -> box
 *     #$  #                 . -> goal
 *   ###  $##                * -> box on a goal (not in this figure)
 *   #  $ $ #                @ -> pusher
 * ### # ## #   ######       + -> pusher on a goal
 * #   # ## #####  ..#       s -> inside ground (generated by recursive
 * # $  $          ..#            algorithm in program memory
 * ##### ### #@##  ..#
 *     #     #########
 *     #######
 */
/*----------------------------------------------*/

#ifndef LEVEL_H_
#define LEVEL_H_

#include <stdlib.h>
#include <string.h>
#include <libxml/parser.h>
#include <libxml/tree.h>
#include "Base.h"
#include "Path.h"

class Level
{
protected:
	Base* base; /**< Main class of the game */
	int id; /**< Level number (starting with 1) */
	char name[65]; /**< Name of this level */
	char packName[33]; /**< Name of pack that contains this level */
	char* grid; /**< Grid of the level */
	int boxesNumber; /**< Number of boxes in this level */
	int goalsNumber; /**< Number of goals in this level */
	int rowsNumber; /**< Rows number */
	int colsNumber; /**< Cols number */
	int pusherPosM; /**< M position of the pusher */
	int pusherPosN; /**< N position of the pusher */
	double xCenter; /**< Level center in X (help to draw) */
	double yCenter; /**< Level center in Y (help to draw) */
	bool won; /**< is this level succeed ? */
	Path* myBestMoves; /**< Best moves of loggued player for this level*/
	Path* myBestPushes; /**< Best pushes of loggued player for this level*/
	Path* worldBestMoves; /**< World best moves for this level */
	Path* worldBestPushes; /**< World best pushes for this level */
	Path* actualPath; /**< Actual path used in this level */

public:
	static const int MOUV_NONE		= 0;
	static const int MOUV_SOKOBAN	= 1;
	static const int MOUV_BOX		= 2;

	/**
	 * Constructor for a empty level
	 * @param base main class of the game
	 */
	Level(Base* base);

	/**
	 * Constructor for a level which is copy of param "level"
	 * @param base main class of the game
	 * @param source to be copied in this object
	 */
	Level(Base* base, const Level* source);

	/**
	 * Constructor for a level from a Node in a XML sile
	 * @param base main class of the game
	 * @param levelNode Node in XML file containing levels
	 * @param pathNode Node in XML file containing paths of loggued player
	 * @param id number of this level in its pack (starting with 1)
	 * @param Name of the pack that contains this level
	 */
	Level(Base* base, xmlNodePtr levelNode, xmlNodePtr pathNode, int id,
			const char* packName);

	/**
	 * Destructor
	 */
	~Level();

	/* --------*/
	/* Getters */
	/* --------*/
	/** @Return Id of this level */
	inline int getId(void) const { return id; }
	/** @Return Name of this level */
	inline const char* getName(void) const { return name; }
	/** @Return Name of pack that contains this level */
	inline const char* getPackName(void) const { return packName; }
	/** @Return Grid of this level */
	inline const char* getGrid(void) const { return grid; }
	/** @Return Number of boxes of this level */
	inline int getBoxesNumber(void) const { return boxesNumber; }
	/** @Return Number of goals of this level */
	inline int getGoalsNumber(void) const { return goalsNumber; }
	/** @Return Number of rows of this level */
	inline int getRowsNumber(void) const { return rowsNumber; }
	/** @Return Number of cols of this level */
	inline int getColsNumber(void) const { return colsNumber; }
	/** @Return pos of pusher (number of row) */
	inline int getPusherPosM(void) const { return pusherPosM; }
	/** @Return pos of pusher (number of col) */
	inline int getPusherPosN(void) const { return pusherPosN; }
	/** @Return X Center of this level (help to draw) */
	inline double getXCenter(void) const { return xCenter; }
	/** @Return Y Center of this level (help to draw) */
	inline double getYCenter(void) const { return yCenter; }
	/** @Return true if level is succeed, false if not */
	inline bool getWon(void) const { return won; }
	/** @Return best moves of loggued player */
	inline const Path* getMyBestMoves(void) const { return myBestMoves; }
	/** @Return best pushes of loggued player */
	inline const Path* getMyBestPushes(void) const { return myBestPushes; }
	/** @Return World best moves */
	inline const Path* getWorldBestMoves(void) const { return worldBestMoves; }
	/** @Return World best pushes */
	inline const Path* getWorldBestPushes(void) const { return worldBestPushes; }
	/** @Return Actual path used in this level */
	inline Path* getActualPath(void) const { return actualPath; }

	/* --------*/
	/* Setters */
	/* --------*/
	/** @param Number of boxes of this level */
	inline void setBoxesNumber(int boxesNumber) { this->boxesNumber = boxesNumber; }
	/** @param Number of goals of this level */
	inline void setGoalsNumber(int goalsNumber) { this->goalsNumber = goalsNumber; }
	/** @param Number of rows of this level  */
	inline void setPusherPosM(int pusherPosM) { this->pusherPosM = pusherPosM; }
	/** @param Number of cols of this level */
	inline void setPusherPosN(int pusherPosN) { this->pusherPosN = pusherPosN; }

	/* -------*/
	/* Others */
	/* -------*/
	/**
	 * Read the value of position (m,n).
	 * Position start in the upper-left corner of the grid with (0,0).
	 * @param m Row number.
	 * @param n Col number.
	 * @return Value of position (m,n) or 'E' if pos is out of grid.
	 */
	char readPos(const int m, const int n) const;

	/**
	 * Read the value of position "pos" of the grid.
	 * Position start in the upper-left corner of the grid with (0,0).
	 * @param pos Absolute position in the grid
	 * @return Value of position pos or 'E' if pos is out of grid.
	 */
	char readPos(const int pos) const;

	/**
	 * Write the value of letter in position (m,n).
	 * Position start in the upper-left corner of the grid with (0,0).
	 * @param m Row number.
	 * @param n Col number.
	 * @param letter value to assign at (m,n) in the grid
	 */
	void writePos(const int m, const int n, const char letter);

	/**
	 * Write the value of letter in position "pos".
	 * Position start in the upper-left corner of the grid with (0,0).
	 * @param pos Absolute position in the grid.
	 * @param letter value to assign at (m,n) in the grid
	 */
	void writePos(const int pos, const char letter);

	/**
	 * Look if pusher can move in a given direction
	 * @param direction 'u', 'd', 'l', 'r' in lowercase and uppercase
	 * @return true if pusher can move in this direction, false if not.
	 */
	bool pusherCanMove(const char direction) const;

	/**
	 * Move the pusher in a given direction and save it in the actualPath
	 * @param direction Direction where to move the pusher (u,d,l,r,U,D,L,R)
	 * @return Level::MOUV_NONE if no move.
	 * 		   Level::MOUV_SOKOBAN if normal move.
	 * 		   Level::MOUV_BOX if box move.
	 */
	int move(const char direction);

	/**
	 * Move the pusher backward and erase last move in the actualPath
	 * @return Level::MOUV_NONE if no move.
	 * 		   Level::MOUV_SOKOBAN if normal move.
	 * 		   Level::MOUV_BOX if box move.
	 */
	int eraseMove(void);

	/**
	 * Return true if all boxes are in their goals.
	 * @return true if all boxes are in their goals, false if not
	 */
	bool isWon(void) const;

	/**
	 * Test if a given path is solution of the ACTUAL STATE of this level
	 * @param path path to test in this level
	 * @return true if path is solution, false if not.
	 */
	bool isSolution(Path *path) const;

	/**
	 * Print level in text mode in a file.
	 * @param fileName name of the file we want to print in.
	 */
	void print(const char* fileName) const;

	/**
	 * Print level in standard output
	 */
	void print(void) const;

	/**
	 * Print every paths of this level in a openened file in parameter.
	 * You usually don't need to use this function
	 * (only with Pack::xmlSavePath()).
	 * @param file opened file
	 */
	void xmlSavePath(FILE* file) const;

protected:
	/**
	 * Initialize (find) starting position of pusher to store it in this object
	 */
	void initializePusherPos(void);

	/**
	 * Transform empty spaces inside level in ground represented by 's' used
	 * to draw the level. Call to recursive function "makeFloorRec".
	 */
	void makeGround(void);

	/**
	 * Recursive function used to transform inside spaces by ground ('s')
	 * started with initial position of sokoban.
	 * NEVER use this function directly. Use makeFloor instead.
	 * @param m Rows number (start with sokoban position)
	 * @param n Cols number (start with sokoban position)
	 */
	void makeGroundRec(const int m, const int n);

	/**
	 * Copy other level in this object. Used by constructor.
	 * @param source level to be copied in this object.
	 */
	void copyLevel(const Level* source);

	/**
	 * Print level in text mode in a file or in the shell.
	 * @param fileName name of the file we want to print in. If NULL, then
	 *                 it will be print on screen (standard output)
	 */
	void printInFile(const char* fileName) const;

	/**
	 * Parse the Level part of a XML file (between <Level> and </Level>)
	 * @param levelNode Position in XML file where we can load a level (<Level>)
	 * @param pathNode Position in second XML file (the one with best paths
	 *                 assigned to a particular player)
	 * @param id Number of the level in the pack (starting with "1")
	 */
	void xmlLoad(xmlNodePtr levelNode, xmlNodePtr pathNode, const int id);
};

#endif /*LEVEL_H_*/
